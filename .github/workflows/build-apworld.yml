name: Build and Release APWorld

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build-apworld]

jobs:
  build:
    runs-on: windows-latest

    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      should_build: ${{ steps.changes.outputs.should_build }}

    steps:
      - name: Determine branch to build
        id: branch
        shell: bash
        run: |
          branch="${{ github.event.client_payload.branch }}"
          if [ -z "$branch" ]; then
            branch="${GITHUB_REF#refs/heads/}"
          fi
          echo "üèóÔ∏è Building branch: $branch"
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}
          fetch-depth: 0

      - name: Check if build should run (skip workflow/README-only changes)
        id: changes
        shell: bash
        run: |
          branch="${{ steps.branch.outputs.branch }}"
          event_name="${{ github.event_name }}"

          # Always build when manually or externally triggered
          if [[ "$event_name" == "workflow_dispatch" || "$event_name" == "repository_dispatch" ]]; then
            echo "üîß Manual or external trigger detected ‚Äî building regardless of changes."
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "üîç Checking for relevant changes since last commit..."
          changed_files=$(git diff --name-only HEAD~1 HEAD || true)
          echo "Changed files:"
          echo "$changed_files"

          if [[ -z "$changed_files" ]]; then
            echo "üü° No changes detected. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Skip if only workflows or README changed
          if echo "$changed_files" | grep -Eq '^(\.github/workflows/|README\.md)'; then
            non_workflow_changes=$(echo "$changed_files" | grep -Ev '^(\.github/workflows/|README\.md)' || true)
            if [[ -z "$non_workflow_changes" ]]; then
              echo "üü° Only workflow/README changes detected ‚Äî skipping build."
              echo "should_build=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          echo "‚úÖ Relevant changes detected ‚Äî proceed with build/release."
          echo "should_build=true" >> $GITHUB_OUTPUT

      - name: Run PowerShell build script
        if: steps.changes.outputs.should_build == 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $rootDir = "${{ github.workspace }}"
          Set-Location $rootDir

          $worldFolder = Join-Path $rootDir "worlds/rac3"
          $zipPath = Join-Path $rootDir "rac3.zip"
          $apworldPath = Join-Path $rootDir "rac3.apworld"

          Write-Host "üßπ Cleaning old build artifacts..."
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          if (Test-Path $apworldPath) { Remove-Item $apworldPath -Force }

          Write-Host "üì¶ Creating zip from: $worldFolder"
          if (-Not (Test-Path $worldFolder)) {
            Write-Host "‚ùå World folder not found: $worldFolder"
            Exit 1
          }

          Compress-Archive -Path $worldFolder -DestinationPath $zipPath -Force
          Write-Host "üîÑ Renaming rac3.zip ‚Üí rac3.apworld..."
          Rename-Item -Path $zipPath -NewName "rac3.apworld"

          Write-Host "‚úÖ Done! Output: $apworldPath"

      - name: üèóÔ∏è Set up Python
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Install dependencies
        if: steps.changes.outputs.should_build == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install extra dependencies
          pip install factorio-rcon-py>=2.1.2 nest-asyncio>=1.5.5 pyinstaller pillow requests zstandard pyevermizer dolphin-memory-engine Pymem>=1.13.0 --disable-pip-version-check

      - name: üß™ Run Archipelago generation and edit YAML
        if: steps.changes.outputs.should_build == 'true'
        shell: pwsh
        env:
          AP_NO_UPDATE: "1"
          SKIP_REQUIREMENTS_UPDATE: "1"
        run: |
          $ErrorActionPreference = "Stop"
          $rootDir = "${{ github.workspace }}"
          Set-Location $rootDir
          Write-Host "üß™ Generating template options..."
          python Launcher.py "Generate Template Options" || true

          Write-Host "üìÇ Checking Players/Templates folder..."
          Get-ChildItem -Recurse Players/Templates | Write-Host

          # Ensure Players folder exists
          if (-Not (Test-Path Players)) { New-Item -ItemType Directory -Path Players }
          # Copy the RaC3 template YAML
          $yamlSource = Join-Path $rootDir 'Players/Templates/Ratchet & Clank 3.yaml'
          $yamlDest   = Join-Path $rootDir 'Players/Ratchet & Clank 3.yaml'
          $yamlRoot   = Join-Path $rootDir RaC3.yaml
          if (-Not (Test-Path $yamlSource)) { Write-Error "Template YAML not found: $yamlSource" }
          Copy-Item -LiteralPath $yamlSource -Destination $yamlDest -Force
          
          # Read YAML
          $yamlContent = Get-Content -LiteralPath $yamlDest -Raw
          
          # Update version
          $yamlContent = $yamlContent -replace 'version:\s*0\.6\.4', 'version: 0.6.3'
          
          # Update exclude_locations depending on branch
          $branch = "${{ steps.branch.outputs.branch }}"
          if ($branch -eq "staging") {
              $excludeReplacement = @"
            exclude_locations:
              # Prevent these locations from having an important item.
              Unstable: 1
              Weapons: 1
              Gadgets: 1
          "@
          } else {
              $excludeReplacement = @"
            exclude_locations:
              # Prevent these locations from having an important item.
              Unstable: 1
          "@
          }
          # Replace the original block
          $yamlContent = $yamlContent -replace '(?ms)^\s*exclude_locations:\s*\n\s*# Prevent these locations[^\n]*\n\s*\[\]', $excludeReplacement
          
          # Update plando_items with exact 2-space indentation
          $plandoReplacement = @"
            plando_items:
              # Generic items plando.
              - items:
                  Progressive RY3N0: 5
                locations:
                  - 'Phoenix: Long Term Trophy: Titanium Collector'
                  - 'Phoenix: Long Term Trophy: Friend of the Rangers'
                  - 'Phoenix: Long Term Trophy: Annihilation Nation Champion'
                  - 'Command Center: Dr. Nefarious Defeated!'
                  - 'Annihilation: Qwarktastic Battle'
          "@
          $yamlContent = $yamlContent -replace '(?ms)^\s*plando_items:\s*\n\s*# Generic items plando\.\s*\[\]', $plandoReplacement
          
          # Write YAML back
          Set-Content -LiteralPath $yamlDest -Value $yamlContent -Force
          Copy-Item -LiteralPath $yamlDest -Destination $yamlRoot -Force
          Write-Host "‚úÖ YAML edited successfully."

          # Continue with generation test
          Write-Host "üß™ Testing seed generation..."
          python Generate.py || true

          Write-Host "‚úÖ Test step completed ‚Äî continuing with release."

      - name: Upload build artifact
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: apworld-and-template
          path: |
            rac3.apworld
            RaC3.yaml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_build == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.branch }}
          fetch-depth: 0

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: apworld-and-template
          path: .

      - name: Prepare YAML for GitHub Release
        run: |
          # Check the file exists
          if [ ! -f RaC3.yaml ]; then
            echo "‚ùå YAML file missing!"
            ls -la
            exit 1
          fi

          # Rename to original filename before uploading
          # mv RaC3.yaml "Ratchet & Clank 3.yaml"
          # echo "‚úÖ Renamed back to: Ratchet & Clank 3.yaml"

      - name: Determine next semantic version
        id: semver
        shell: bash
        run: |
          set -e
          branch="${{ needs.build.outputs.branch }}"
          git fetch --tags

          echo "üî¢ Determining next semantic version for branch: $branch"

          # Get the latest tag, depending on branch type
          if [[ "$branch" == "main" ]]; then
            latest_tag=$(git tag --sort=-v:refname | grep -v -- '-pre' | head -n 1 || true)
          else
            latest_tag=$(git tag --sort=-v:refname | head -n 1 || true)
          fi

          if [[ -z "$latest_tag" ]]; then
            echo "‚ö†Ô∏è No previous tags found. Starting from v0.0.0"
            latest_tag="v0.0.0"
          fi

          echo "Latest tag: $latest_tag"

          # Strip leading "v" if present
          tag_stripped="${latest_tag#v}"

          # Split version safely (defaults if missing)
          IFS='.' read -r major minor patch <<< "$tag_stripped"
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}

          # Bump version based on branch type
          if [[ "$branch" == "main" ]]; then
            minor=$((minor + 1))
            patch=0
            version="${major}.${minor}.${patch}"
          else
            patch=$((patch + 1))
            version="${major}.${minor}.${patch}-pre"
          fi

          echo "‚úÖ Next version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Create release notes
        id: notes
        shell: bash
        run: |
          set -e
          repo_url="https://github.com/${{ github.repository }}"
          branch="${{ steps.semver.outputs.branch }}"
          new_tag="v${{ steps.semver.outputs.version }}"
          short_sha=$(git rev-parse --short HEAD)

          git fetch --tags

          echo "üîç Determining previous tag for changelog..."

          if [[ "$branch" == "main" ]]; then
            # üß± Stable release: only compare to last stable
            prev_tag=$(git tag --sort=-v:refname | grep -v -- '-pre' | head -n 2 | tail -n 1 || true)
          else
            # üß™ Pre-release: try to find previous pre-release first
            prev_tag=$(git tag --sort=-v:refname | grep -- '-pre' | head -n 2 | tail -n 1 || true)

            # If no previous pre-release exists, fall back to last stable release
            if [[ -z "$prev_tag" ]]; then
              prev_tag=$(git tag --sort=-v:refname | grep -v -- '-pre' | head -n 1 || true)
            fi
          fi

          echo "Previous tag: ${prev_tag:-<none>}"
          echo "Current tag:  ${new_tag}"

          # Build changelog link
          if [[ -n "$prev_tag" ]]; then
            changelog="${repo_url}/compare/${prev_tag}...${new_tag}"
          else
            changelog="${repo_url}/commits/${branch}"
          fi

          echo "üîç Using changelog link: $changelog"

          # Gather commit list (limit 200, count total)
          if [[ -n "$prev_tag" ]]; then
            total_commits=$(git rev-list --count "${prev_tag}..HEAD")
            commit_list=$(git log "${prev_tag}..HEAD" --pretty=format:"- %s (%h)" -n 200)
          else
            total_commits=$(git rev-list --count HEAD)
            commit_list=$(git log -n 200 --pretty=format:"- %s (%h)")
          fi

          if [[ -z "$commit_list" ]]; then
            commit_list="- (no new commits since last release)"
          fi

          if [[ $total_commits -gt 200 ]]; then
            extra_commits=$((total_commits - 200))
            commit_list="${commit_list}\n- ...and ${extra_commits} more commits."
          fi

          cat <<EOF > release_notes.md
          ## RaC3 APWorld ${new_tag}

          **Branch:** ${branch}  
          **Commit:** ${short_sha}  
          **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")

          <details>
          <summary><strong>üìú Summary (Last ${total_commits} Commits)</strong></summary>

          ${commit_list}

          </details>

          **Full changelog and compare**: ${changelog}

          ### Notes
          This release was automatically generated from the **${branch}** branch.  
          Latest (main) releases are recommended, as pre-releases (staging) may contain experimental or in-progress changes.

          ### If a location is broken and does not get sent out
          Go to the server console (locally or via the Archipelago room page) and run:  
          \`/send_location <player_name> <location>\` Example: \`/send_location TaoshiRaC3 "Crash Site: Infobot: Aridia"\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rac3.apworld
            RaC3.yaml
          tag_name: v${{ steps.semver.outputs.version }}
          name: "RaC3 APWorld v${{ steps.semver.outputs.version }}"
          body_path: release_notes.md
          prerelease: ${{ contains(steps.semver.outputs.version, '-pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
